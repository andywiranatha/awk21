# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15pZ0Hp0qypJ-Ve3NCLNmZKDS3cZ1Srcb
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
irisData = pd.read_csv("listings.csv", delimiter = ",")
print(irisData.head())

import matplotlib.pyplot as plt
from sklearn import linear_model
from sklearn.model_selection import train_test_split
import numpy as np
import seaborn as sb
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

newIrisData = irisData[["id", "name", "host_id", "host_name", "neighbourhood_group", "neighbourhood", "latitude", "longitude", "room_type", "price", "minimum_nights", "number_of_reviews", "last_review", "reviews_per_month", "calculated_host_listings_count", "availability_365"]]
print(newIrisData.head())
newIrisData.hist()
plt.subplots_adjust(hspace = 0.5, wspace = 0.5)
plt.rcParams["figure.figsize"] = [16,9]
plt.show()

train, test = train_test_split(newIrisData, test_size=0.2)
regression = linear_model.LinearRegression()
regression.fit(train[["price"]], train[["availability_365"]])
print('Coefficients: ', regression.coef_)
print('Intercept: ',regression.intercept_)

plt.scatter(train["price"], train["availability_365"],  color='blue')
plt.plot(train[["price"]], regression.coef_ * train[["price"]] + regression.intercept_, '-r', color='pink')
plt.xlabel("Price")
plt.ylabel("Availability 365")
plt.rcParams["figure.figsize"] = [9,7]
plt.show()

sb.pairplot(train)
sb.lmplot("price", "availability_365", data = train)
plt.show()

prediction = regression.predict(test[["price"]])
for i in range(len(test)):
  print(test[["price"]].values[i], prediction[i])

print("MAE : ", mean_absolute_error(test[["availability_365"]], prediction))
print("MSE : ", mean_squared_error(test[["availability_365"]], prediction))
print("R2 : ", r2_score(test[["availability_365"]], prediction))

import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, mean_squared_error, mean_absolute_error
from sklearn import preprocessing
from sklearn.model_selection import train_test_split

for i in irisData:
  print(i, irisData[i].dtypes)
  if irisData[i].isna().values.any() and irisData[i].dtypes != object:
      irisData[i] = irisData[i].fillna(irisData[i].mean())

train, test = train_test_split(irisData, test_size=0.1)

KNN = KNeighborsClassifier(n_neighbors = 3).fit(train[["price", "number_of_reviews"]], train["availability_365"])

newClassification = KNN.predict([[17,8],[8,10]])
print(newClassification)

classification = KNN.predict(test[["price", "number_of_reviews"]])
accuracy = accuracy_score(test["availability_365"], classification)
MAE = mean_absolute_error(test["availability_365"], classification)
MSE = mean_squared_error(test["availability_365"], classification)

print(" ACC : %.2f" % accuracy)
print(" MAE : %.2f" % MAE)
print(" MSE : %.2f" % MSE)

Ks = 10
accuracy = np.zeros((Ks-1))
ConfustionMx = [];
for n in range(1, Ks):    
    KNN = KNeighborsClassifier(n_neighbors = n).fit(train[["price", "number_of_reviews"]], train["availability_365"])  
    classification = KNN.predict(test[["price", "number_of_reviews"]])
    accuracy[n - 1] = accuracy_score(test["availability_365"], classification)
    
print("Best  ACC : %.2f" % accuracy.max(), ", with k = ", accuracy.argmax() + 1)